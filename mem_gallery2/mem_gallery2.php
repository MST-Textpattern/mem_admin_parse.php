<?php

// This is a PLUGIN TEMPLATE.

// Copy this file to a new name like abc_myplugin.php.  Edit the code, then
// run this file at the command line to produce a plugin for distribution:
// $ php abc_myplugin.php > abc_myplugin-0.1.txt

// Plugin name is optional.  If unset, it will be extracted from the current
// file name. Uncomment and edit this line to override:
$plugin['name'] = 'mem_gallery2';

// 0 = Plugin help is in Textile format, no raw HTML allowed (default).
// 1 = Plugin help is in raw HTML.  Not recommended.
# $plugin['allow_html_help'] = 1;

$plugin['version'] = '0.1';
$plugin['author'] = 'Michael Manfre';
$plugin['author_uri'] = 'http://manfre.net/';
$plugin['description'] = 'Show pictures stored in Gallery2.';

// Plugin types:
// 0 = regular plugin; loaded on the public web side only
// 1 = admin plugin; loaded on both the public and admin side
// 2 = library; loaded only when include_plugin() or require_plugin() is called
$plugin['type'] = 1;

if (!defined('txpinterface'))
	@include_once('../zem_tpl.php');

if (0) {
?>
# --- BEGIN PLUGIN HELP ---

h1(title). mem_gallery2 plugin

h2(section summary). Summary

p. This plugin will allow you to embed pictures and albums from a "Gallery2":http://gallery.menalto.com/ install on the same host.

h2(section contact). Author Contact

"Michael Manfre":mailto:mmanfre@gmail.com?subject=Textpattern%20mem_gallery2%20plugin
"http://manfre.net":http://manfre.net

h2(section license). License

p. This plugin is licensed under the "GPLv2":http://www.fsf.org/licensing/licenses/info/GPLv2.html.

h2(section installation). Installation

p. "Start Install Wizard":./index.php?event=mem_gallery2&step=install

* *mem_gallery2_path* is the directory path to the gallery2 folder. E.g. /path/to/gallery2
* *mem_gallery2_url* is the relative url to the gallery2 folder. E.g. /gallery2

h2(section tags). Tags

* "mem_g2_block":#mem_g2_block
* "mem_g2_item":#mem_g2_item
* "mem_g2_random":#mem_g2_random


h3(tag#mem_g2_block). mem_g2_block

p(tag-summary). Show an image block generated by Gallery2. Attribute names are case sensitive. "Gallery2 Image Block Help":http://codex.gallery2.org/Gallery2:Modules:imageblock

*(atts) %(atts-name)show% %(atts-type)string% Pipe(|) separated list chosen from: title, date, views, owner, heading, fullSize, rawImage, none
* %(atts-name)blocks% %(atts-type)string% Pipe(|) separate list chosen from: randomImage, recentImage, viewedImage, randomAlbum, recentAlbum, viewedAlbum, dailyImage, weeklyImage, monthlyImage, dailyAlbum, weeklyAlbum, monthlyAlbum, specificItem; default is randomImage
* %(atts-name)itemId% %(atts-type)string% Limit the item selection to the subtree of the gallery under the album with the given id; or the id of the item to display when used with specificItem block type
* %(atts-name)maxSize% %(atts-type)number% Scale images to this maximum size. If used alone Gallery will locate the most-closely-sized image to the specified value - larger images will be scaled down as necessary in your browser. If specified along with g2_show=fullSize the full size image will always be used and scaled down as necessary.
* %(atts-name)exactSize% %(atts-type)number% Just like g2_maxSize except that it will not substitute an image smaller than the size you request, so you'll get the closest match in size possible. Note that this may use a lot more bandwidth if a much larger image has to be scaled down in your browser.
* %(atts-name)link% %(atts-type)string% Href for link on image; value of none for no link; default is link to item in the Gallery
* %(atts-name)linkTarget% %(atts-type)string% Add a link target (for example, to open links in a new browser window)

h3(tag#mem_g2_item). mem_g2_item

p(tag-summary). Alias for mem_g2_block with blocks=specificItem

h3(tag#mem_g2_block). mem_g2_random

p(tag-summary). Alias for mem_g2_block with blocks=randomImage

# --- END PLUGIN HELP ---
<?php
}

# --- BEGIN PLUGIN CODE ---

// MLP
global $mem_g2_lang;
if (!is_array($mem_g2_lang))
{
	$mem_g2_lang = array(
		'invalid_path'	=>	'File embed.php not found.',
	);
}

define( 'MEM_GALLERY2_PREFIX' , 'mem_gallery2' );

register_callback( 'mem_gallery2_enumerate_strings' , 'l10n.enumerate_strings' );
function mem_gallery2_enumerate_strings($event , $step='' , $pre=0)
{
	global $mem_self_lang;
	$r = array	(
				'owner'		=> 'mem_gallery2',			#	Change to your plugin's name
				'prefix'	=> MEM_GALLERY2_PREFIX,				#	Its unique string prefix
				'lang'		=> 'en-gb',						#	The language of the initial strings.
				'event'		=> 'public',					#	public/admin/common = which interface the strings will be loaded into
				'strings'	=> $mem_g2_lang,				#	The strings themselves.
				);
	return $r;
}

function mem_g2t($what,$args = array())
{
	global $mem_g2_lang, $textarray;
	
	$key = strtolower( MEM_GALLERY2_PREFIX . '-' . $what );
	
	if (isset($textarray[$key]))
		$str = $textarray[$key];
	else
	{
		$key = strtolower($what);
		
		if (isset($mem_g2_lang[$key]))
			$str = $mem_g2_lang[$key];
		elseif (isset($textarray[$key]))
			$str = $textarray[$key];
		else
			$str = $what;
	}

	if( !empty($args) )
		$str = strtr( $str , $args );

	return $str;
}

if (txpinterface == 'admin')
{	
	add_privs('mem_gallery2', '1');
	register_callback('mem_gallery2_handler', 'mem_gallery2');
	register_callback('mem_gallery2_handler', 'prefs');
	
	function mem_gallery2_handler($event, $step)
	{
		global $mem_gallery2_path, $mem_gallery2_url;

		if ($event == 'mem_gallery2')
		{
			if ($step == 'install')
			{
				pageTop('');
				$rs = $rs2 = false;
				if (!isset($mem_gallery2_path))
					$rs = set_pref('mem_gallery2_path', doSlash(txpath), 'admin', '1');
				if (!isset($mem_gallery2_url))
					$rs2 = set_pref('mem_gallery2_url', '/gallery2', 'admin', '1');

				if ($rs || $rs2)
					echo '<p><a href="?event=prefs&amp;step=advanced_prefs">Added preferences</a></p>';
				else
					echo '<p>Nothing to do.</p>';
			}
		}
		else if ($event == 'prefs' && ($step == 'prefs_list' || $step == 'advanced_prefs'))
		{
			if (!file_exists($mem_gallery2_path . DS . 'embed.php'))
			{
				ob_start('mem_gallery2_pref_warning');
			}
		}
	}
	
	function mem_gallery2_pref_warning($buffer)
	{
		$invalid_path_msg = mem_g2t('invalid_path');
		
		$js =<<< EOJS
<script type="text/javascript">
$(document).ready(function(){
	$('#mem_gallery2_path').css('background','red').attr('title', '{$invalid_path_msg}')
});
</script>
EOJS;
		
		return str_replace('</head>', $js .n. '</head>', $buffer);
	}
} // end admin
else
{
	function mem_g2_init()
	{
		global $mem_gallery2_path, $mem_gallery2_url;

		static $_init = false;
		static $_rs = false;
		
		if ($_init)
			return $_rs;

		require_once($mem_gallery2_path . DS . 'embed.php');
		
		$mem_gallery2_url = rtrim($mem_gallery2_url, '/') . '/';
		
		$_rs = GalleryEmbed::init(array('fullInit' => true, 'embedUri' => $mem_gallery2_url, 'g2Uri' => $mem_gallery2_url .'main.php'));
		$_init = true;
	}
	
	function mem_g2_get_image_block($show, $blocks='randomImage', $itemId=false, $maxSize=false, $exactSize=false, $link=false, $linkTarget=false)
	{
		mem_g2_init();

		$opts = array('show' => $show);
		
		$args = array('blocks','itemId','maxSize','exactSize','link','linkTarget');
		foreach($args as $a)
			if (isset($$a) && $$a !== false)
				$opts[$a] = $$a;
		list ($ret, $bodyHtml, $headHtml) = GalleryEmbed::getImageBlock($opts);
		
		if ($ret)
			return false;
		
		return $bodyHtml;
	}
	
	function mem_g2_latts($atts)
	{
	}

	function mem_g2_block($atts, $thing='')
	{
		extract(lAtts(array(
			'show'		=>	'none',
			'blocks'	=>	'randomImage',
			'maxSize'	=>	false,
			'exactSize'	=>	false,
			'itemId'	=>	false,
			'link'		=>	false,
			'linkTarget'	=>	false,			
		),$atts));
		
		$rs = mem_g2_get_image_block($show, $blocks, $itemId, $maxSize, $exactSize, $link, $target);
		if ($rs) return $rs;
	}

	function mem_g2_random($atts, $thing='')
	{
		$atts['blocks'] = 'randomImage';
		return mem_g2_block($atts, $thing);
	}

	function mem_g2_item($atts, $thing='')
	{
		$atts['blocks'] = 'specificItem';
		return mem_g2_block($atts, $thing);
	}
}

# --- END PLUGIN CODE ---

?>
